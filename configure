#!/bin/sh
#
# xclass: gui toolkit
# configure script
# Copyright (c) Devin Smith 2009-2017
#
# This script is based on various scripts from other open source projects.
# Major portions are straight from qemu, ffmpeg, and gxemul.

###############################################################################
# default parameters
PREFIX="/usr/local"
VERSION="0.9.2"

###############################################################################
# Check for command line arguments
for arg in $*; do
optarg=`echo $arg | sed 's/[-a-z]*=//'`
case $arg in
    --prefix=*)
      PREFIX="$optarg"
      ;;
    *)
      echo "xclass build configuration script"
      echo
      echo "Target directories:"
      echo " --prefix=PREFIX        path to install to"
      echo
      exit 1
      ;;
esac
done

printf "checking for valid C compiler... "

# Try with the simplest possible test program. Actually, test static
# variables as well, because GXemul uses things like NULL-initialized global
# pointers, and it is important that they work. (GCC on Solaris is known to
# be completely broken, for instance.)

echo '#include <stdio.h>

int main(int argc, char *argv[])
{
	static int x = 0;
	static int y = 1;
	printf("%i,%i", x, y);
	return 0;
}
' > _testprog.c

if [ z"$CC" = z ]; then
  CC=cc
fi

if $CC $CFLAGS -c -o _testprog _testprog.c > /dev/null 2> /dev/null ; then
  : C compiler works ok
else
	# try gcc
	CC=gcc
	if $CC $CFLAGS -c -o _testprog _testprog.c > /dev/null 2> /dev/null ; then
		: C compiler works ok
	else
		echo "ERROR: \"$CC\" either does not exist or does not work"
		exit 1
	fi
fi
rm -f _testprog*

printf "$CC\n"

printf "checking for X11 headers and libs\n"

#  Try to compile a small X11 test program:
printf "#include <X11/Xlib.h>
#include <stdio.h>
Display *dis;
void f(void) {
	dis = XOpenDisplay(NULL);
}
int main(int argc, char *argv[])
{ return 0; }
" > _test_x11.c

XOK=0
# Base case where X11 is inside /usr/include
XINCLUDE=
XLIB=-lX11
if [ -e /usr/include/X11/Xlib.h ]; then
	$CC $CFLAGS _test_x11.c -c -o _test_x11.o 2> /dev/null
	$CC $CFLAGS _test_x11.o -o _test_x11 $XLIB 2> /dev/null

	if [ -x _test_x11 ]; then
		XOK=1
	fi
	rm -f _test_x11 _test_x11.o
fi

# Try explicitly providing a link library directory hint.
if [ z$XOK = z0 ]; then
	XINCLUDE="/usr/X11R6/include"
	if [ -e $XINCLUDE/X11/Xlib.h ]; then
		XLIB="-L/usr/X11R6/lib -lX11"
		$CC $CFLAGS -I$XINCLUDE _test_x11.c -c -o _test_x11.o 2> /dev/null
		$CC $CFLAGS _test_x11.o -o _test_x11 $XLIB 2> /dev/null

		if [ -x _test_x11 ]; then
			XOK=1
		fi

		rm -f _test_x11 _test_x11.o
	fi
fi

if [ z$XOK = z0 ]; then
	# who does this???
	XINCLUDE="/usr/local/include"
	if [ -e $XINCLUDE/X11/Xlib.h ]; then
		XLIB="-L/usr/local/lib -lX11"
		$CC $CFLAGS -I$XINCLUDE _test_x11.c -c -o _test_x11.o 2> /dev/null
		$CC $CFLAGS _test_x11.o -o _test_x11 $XLIB 2> /dev/null

		if [ -x _test_x11 ]; then
			XOK=1
		fi

		rm -f _test_x11 _test_x11.o
	fi
fi

#  Special case for some 64-bit Linux/x86_64 systems:
if [ z$XOK = z0 ]; then
	XINCLUDE="/usr/X11R6/include"
	if [ -e $XINCLUDE/X11/Xlib.h ]; then
		XLIB="-L/usr/X11R6/lib64 -lX11"
		$CC $CFLAGS -I$XINCLUDE _test_x11.c -c -o _test_x11.o 2> /dev/null
		$CC $CFLAGS _test_x11.o -o _test_x11 $XLIB 2> /dev/null

		if [ -x _test_x11 ]; then
			XOK=1
		fi
		rm -f _test_x11 _test_x11.o
	fi
fi

# Solaris
if [ z$XOK = z0 ]; then
	XINCLUDE=""
	#  -lsocket for Solaris
	XLIB="-lX11 -lsocket"
	$CC $CFLAGS _test_x11.c -c -o _test_x11.o 2> /dev/null
	$CC $CFLAGS _test_x11.o -o _test_x11 $XLIB 2> /dev/null

	if [ -x _test_x11 ]; then
		XOK=1
	fi
	rm -f _test_x11 _test_x11.o
fi

if [ z`uname` = zNetBSD ]; then
	echo "Using NetBSD hack for X11 libs..."
	XLIB="$XLIB -Wl,-rpath,/usr/X11R6/lib"
fi

if [ z$XOK = z0 ]; then
	echo "Failed to compile X11 test program." \
	    "Exiting.."
	exit 1
fi

###############################################################################
# Build the config.mak file
echo "# Generated by $0 $*" > config.mak
echo >> config.mak
echo "PREFIX=${PREFIX}" >> config.mak
echo >> config.mak

if [ z"$XINCLUDE" = z ]; then
  printf "  X11 headers: (none needed)\n"
else
  printf "  X11 headers: -I$XINCLUDE\n"
fi
printf "  X11 libraries: $XLIB\n"
if [ z"$XINCLUDE" != z ]; then
  echo "XINCLUDE=-I$XINCLUDE" >> config.mak
fi
echo "XLIB=$XLIB" >> config.mak
rm -f _test_x11.c

####
# Create config.h
#  Head of config.h:
printf "/*
 *  THIS FILE IS AUTOMATICALLY CREATED BY configure!
 *  DON'T EDIT THIS FILE MANUALLY, IT WILL BE OVERWRITTEN.
 */
\n#ifndef __CONFIG_H__\n#define __CONFIG_H__\n\n" > include/config.h
printf "#define VERSION \"${VERSION}\"\n" >> include/config.h

if [ z"$XINCLUDE" = z ]; then
  XINCLUDE=/usr/include
fi

# Do we have Xft?
XFTOK=0
XFTHEADER=0

printf "checking for Xft headers and libs\n"
printf "checking if you have Xft.h... "
if [ -e $XINCLUDE/X11/Xft/Xft.h ]; then
	printf "yes\n"
	printf "#define HAVE_XFT_H 1\n" >> include/config.h
else
	printf "no\n"
fi

#  Try to compile a small Xft test program:
printf "#include <X11/Xft/Xft.h>
#include <stdio.h>
FcPattern *pattern;
void f(void) {
	pattern = FcPatternCreate();
}
int main(int argc, char *argv[])
{ return 0; }
" > _test_xft.c

XFTINCLUDE=
XFTLIB=-lXft
# Some operating systems dont need us to explicitly add the Xft
# include flags, so lets see if we can do that here.

$CC $CFLAGS _test_xft.c -c -o _test_xft.o 2> /dev/null
$CC $CFLAGS _test_xft.o -o _test_xft $XFTLIB 2> /dev/null

if [ -x _test_xft ]; then
	XFTOK=1
fi
rm -f _test_xft _test_xft.o

if [ z$XFTOK = z0 ]; then
	XFTINCLUDE=-I/usr/include/freetype2
	$CC $CFLAGS $XFTINCLUDE _test_xft.c -c -o _test_xft.o 2> /dev/null
	$CC $CFLAGS _test_xft.o -o _test_xft $XFTLIB 2> /dev/null

	if [ -x _test_xft ]; then
		XFTOK=1
	fi
	rm -f _test_xft _test_xft.o
fi

if [ z$XFTOK = z0 ]; then
	XFTLIB="-lXft -lfontconfig"
	XFTINCLUDE=-I$XINCLUDE/freetype2
	$CC $CFLAGS -I$XINCLUDE $XFTINCLUDE _test_xft.c -c -o _test_xft.o 2> /dev/null
	$CC $CFLAGS _test_xft.o -o _test_xft $XFTLIB $XLIB 2> /dev/null

	if [ -x _test_xft ]; then
		XFTOK=1
	fi
	rm -f _test_xft _test_xft.o
fi

if [ z$XFTOK = z0 ]; then
	echo "  No Xft detected on this system."
else
	printf "  XFT headers: $XFTINCLUDE\n"
	printf "  XFT libraries: $XFTLIB\n"
	echo "XFTINCLUDE=$XFTINCLUDE" >> config.mak
	echo "XFTLIB=$XFTLIB" >> config.mak
fi
rm -f _test_xft.c

printf "checking if you have Xrandr.h... "
if [ -e $XINCLUDE/X11/extensions/Xrandr.h ]; then
	printf "yes\n"
	printf "#define HAVE_XRANDR_H 1\n" >> include/config.h
else
	printf "no\n"
fi

XRANDROK=0
XRANDRINCLUDE=
XRANDRLIB=-lXrandr

#  Try to compile a small X11 test program that uses Xrandr:
printf "#include <X11/Xlib.h>
#include <X11/extensions/Xrandr.h>
#include <stdio.h>
Display *dis;
int xrreventbase; /* XRR event base */
void f(void) {
	int errorbase;
	dis = XOpenDisplay(NULL);
	if (XRRQueryExtension(dis, &xrreventbase, &errorbase)) {
		XRRSelectInput(dis, XDefaultRootWindow(dis), True);
	}
}
int main(int argc, char *argv[])
{
	f();
	return 0;
}
" > _test_xrandr.c

$CC $CFLAGS -I$XINCLUDE _test_xrandr.c -c -o _test_xrandr.o 2> /dev/null
$CC $CFLAGS _test_xrandr.o -o _test_xrandr $XRANDRLIB $XLIB 2> /dev/null
if [ -x _test_xrandr ]; then
	XRANDROK=1
fi
rm -f _test_xrandr _test_xrandr.o
if [ z$XRANDROK = z0 ]; then
	echo "  No XRandR detected on this system."
else
	printf "  Xrandr headers: $XRANDRINCLUDE\n"
	printf "  Xrandr libraries: $XRANDRLIB\n"
	echo "XRANDRINCLUDE=$XRANDRINCLUDE" >> config.mak
	echo "XRANDRLIB=$XRANDRLIB" >> config.mak
fi
rm -f _test_xrandr.c

printf "\n#endif /* __CONFIG_H__ */\n" >> include/config.h

# Build the top level Makefile
echo "Creating Makefile"
echo '# xclass master makefile

SHELL=/bin/sh
prefix=/usr/local
exec_prefix=${prefix}
subdirs=include lib config doc icons test example-app

include config.mak

all:
	@for i in ${subdirs}; do \
		echo Making all in $$i ; \
		(cd $$i; ${MAKE} all) ; \
	done

shared:
	@for i in ${subdirs}; do \
		echo Making shared library in $$i ; \
		(cd $$i; ${MAKE} shared) ; \
	done

install:
	@for i in ${subdirs}; do \
		echo Installing in $$i ; \
		(cd $$i; ${MAKE} install) ; \
	done

install_shared:
	@for i in ${subdirs}; do \
		echo Installing in $$i ; \
		(cd $$i; ${MAKE} install_shared) ; \
	done

depend:
	@for i in ${subdirs}; do \
		echo Depending in $$i ; \
		(cd $$i; ${MAKE} depend) ; \
	done

clean:
	@for i in ${subdirs}; do \
		echo Cleaning in $$i ; \
		(cd $$i; ${MAKE} clean) ; \
	done
	rm -f *~ *.bak core

distclean:
	@for i in ${subdirs}; do \
		echo Distribution Cleaning in $$i ; \
		(cd $$i; ${MAKE} distclean) ; \
	done
	rm -f *~ *.bak core config.cache config.status config.log 
	find ${subdirs} -name Makefile -exec rm {} \; -print
	rm ./Makefile
' > Makefile

# Build the src level Makefile
#echo "Creating src/Makefile"
#cp src/Makefile.in src/Makefile
#echo "Creating test/Makefile"
#cp test/Makefile.in test/Makefile


echo
echo "Configuration:"
echo "  Install to: ${PREFIX}"
echo
echo "Now type: make (or gmake on a BSD system)"
echo

